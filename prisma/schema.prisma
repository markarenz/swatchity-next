generator client {
  provider        = "prisma-client-js"
  previewFeatures = []
}

datasource db {
  provider = "mongodb"
  url      = env("MONGODB_URI")
}

// AUTH PRISMA ADAPTER
model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  // accessToken  String   @unique
  // createdAt    DateTime @default(now())
  // updatedAt    DateTime @updatedAt
}

model User {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  // createdAt     DateTime  @default(now())
  // updatedAt     DateTime  @updatedAt
}

model VerificationToken {
  identifier String   @id @default(auto()) @map("_id") @db.ObjectId
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// SWATCHES

model UserMeta {
  id            String   @id @default(auto()) @map("_id") @db.ObjectId
  name          String
  username      String   @unique
  email         String   @unique
  level         Int
  score         Int
  prefLang      String
  bio           String
  role          String
  avatarPattern Int
  avatarColor1r Int
  avatarColor1g Int
  avatarColor1b Int
  avatarColor2r Int?
  avatarColor2g Int?
  avatarColor2b Int?
  avatarColor3r Int?
  avatarColor3g Int?
  avatarColor3b Int?
  active        Boolean
  createdAt     DateTime
  modifiedAt    DateTime
  Swatch        Swatch[]
  Reply         Reply[]
}

model Swatch {
  id         String       @id @default(auto()) @map("_id") @db.ObjectId
  userID     String       @db.ObjectId
  user       UserMeta     @relation(fields: [userID], references: [id])
  colorR     Int
  colorG     Int
  colorB     Int
  likes      Int
  active     Boolean
  createdAt  DateTime
  modifiedAt DateTime
  SwatchLike SwatchLike[]
}

model SwatchLike {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  swatchID   String   @db.ObjectId
  userID     String   @db.ObjectId
  swatch     Swatch   @relation(fields: [swatchID], references: [id])
  createdAt  DateTime
  modifiedAt DateTime
}

model Reply {
  id         String      @id @default(auto()) @map("_id") @db.ObjectId
  swatchID   String      @db.ObjectId
  userID     String      @db.ObjectId
  user       UserMeta    @relation(fields: [userID], references: [id])
  colorR     Int
  colorG     Int
  colorB     Int
  likes      Int
  active     Boolean
  createdAt  DateTime
  modifiedAt DateTime
  ReplyLike  ReplyLike[]
}

model ReplyLike {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  replyID    String   @db.ObjectId
  userID     String   @db.ObjectId
  reply      Reply    @relation(fields: [replyID], references: [id])
  createdAt  DateTime
  modifiedAt DateTime
}

model Message {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  toUserID   String   @db.ObjectId
  fromUserID String   @db.ObjectId
  colorR     Int
  colorG     Int
  colorB     Int
  active     Boolean
  createdAt  DateTime
  modifiedAt DateTime
}

model Post {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  contentType String
  minLevel    Int
  title       String
  slug        String   @unique
  metadesc    String
  content     String
  active      Boolean
  createdAt   DateTime
  modifiedAt  DateTime
}
